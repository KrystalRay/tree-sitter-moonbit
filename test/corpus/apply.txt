================================================================================
apply expression
================================================================================
fn init {
  f(1)
  f(1, 2, 3)
  (0).f(4)
  a.f(4)
  a..f(4)
  (0)..f(4)
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal))))))
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal))))
          (argument
            (atomic_expression
              (literal
                (integer_literal))))
          (argument
            (atomic_expression
              (literal
                (integer_literal))))))
      (dot_apply_expression
        (tuple_expression
          (atomic_expression
            (literal
              (integer_literal))))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (atomic_expression
            (literal
              (integer_literal)))))
      (dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (atomic_expression
            (literal
              (integer_literal)))))
      (dot_dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_dot_identifier)
        (argument
          (atomic_expression
            (literal
              (integer_literal)))))
      (dot_dot_apply_expression
        (tuple_expression
          (atomic_expression
            (literal
              (integer_literal))))
        (dot_dot_identifier)
        (argument
          (atomic_expression
            (literal
              (integer_literal))))))))

================================================================================
apply expression with labeled argument
================================================================================
fn init {
  f(1, dim=4)
  f(1, dim~)
  f(1, dim=4)
  f(1, dim?=None)
  f(1, g?(3))
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal))))
          (argument
            (labelled_argument
              (lowercase_identifier)
              (atomic_expression
                (literal
                  (integer_literal)))))))
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal))))
          (argument
            (forwarded_labelled_argument
              (label
                (lowercase_identifier))))))
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal))))
          (argument
            (labelled_argument
              (lowercase_identifier)
              (atomic_expression
                (literal
                  (integer_literal)))))))
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal))))
          (argument
            (optional_argument
              (optional_label
                (lowercase_identifier))
              (constructor_expression
                (uppercase_identifier))))))
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal))))
          (argument
            (apply_expression
              (qualified_identifier
                (lowercase_identifier))
              (apply_operator)
              (arguments
                (argument
                  (atomic_expression
                    (literal
                      (integer_literal))))))))))))

================================================================================
dot apply with labeled argument
================================================================================
fn main {
  a.f(2, dim=4)
  a.f(2, dim~)
  a.f(2, dim=4)
  a.f(2, dim?=None)
  a.f(2, g?(4))
  logger
  .write_string(self.denominator.to_string())
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (labelled_argument
            (lowercase_identifier)
            (atomic_expression
              (literal
                (integer_literal))))))
      (dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (forwarded_labelled_argument
            (label
              (lowercase_identifier)))))
      (dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (labelled_argument
            (lowercase_identifier)
            (atomic_expression
              (literal
                (integer_literal))))))
      (dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (optional_argument
            (optional_label
              (lowercase_identifier))
            (constructor_expression
              (uppercase_identifier)))))
      (dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (apply_operator)
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (integer_literal))))))))
      (dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (dot_apply_expression
            (access_expression
              (qualified_identifier
                (lowercase_identifier))
              (accessor
                (dot_identifier
                  (dot_lowercase_identifier))))
            (dot_identifier
              (dot_lowercase_identifier))))))))

================================================================================
dot dot apply with labeled argument
================================================================================
fn main {
  a..f(2, dim=4)
  a..f(2, dim~)
  a..f(2, dim=4)
  a..f(2, dim?=None)
  a..f(2, g?(4))
  logger
  ..write_string(self.numerator.to_string())
  ..write_string("/")
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (dot_dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_dot_identifier)
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (labelled_argument
            (lowercase_identifier)
            (atomic_expression
              (literal
                (integer_literal))))))
      (dot_dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_dot_identifier)
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (forwarded_labelled_argument
            (label
              (lowercase_identifier)))))
      (dot_dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_dot_identifier)
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (labelled_argument
            (lowercase_identifier)
            (atomic_expression
              (literal
                (integer_literal))))))
      (dot_dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_dot_identifier)
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (optional_argument
            (optional_label
              (lowercase_identifier))
            (constructor_expression
              (uppercase_identifier)))))
      (dot_dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_dot_identifier)
        (argument
          (atomic_expression
            (literal
              (integer_literal))))
        (argument
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (apply_operator)
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (integer_literal))))))))
      (dot_dot_apply_expression
        (dot_dot_apply_expression
          (qualified_identifier
            (lowercase_identifier))
          (dot_dot_identifier)
          (argument
            (dot_apply_expression
              (access_expression
                (qualified_identifier
                  (lowercase_identifier))
                (accessor
                  (dot_identifier
                    (dot_lowercase_identifier))))
              (dot_identifier
                (dot_lowercase_identifier)))))
        (dot_dot_identifier)
        (argument
          (atomic_expression
            (literal
              (string_literal
                (string_fragment
                  (unescaped_string_fragment))))))))))
