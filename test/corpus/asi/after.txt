================================================================================
can occur after semi (DOT_UIDENT, DOT_LIDENT, DOT_INT)
================================================================================
fn main {
  a
  .a
  .3
  .f()
  ..f()
  @a
  .T
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (dot_dot_apply_expression
        (dot_apply_expression
          (access_expression
            (access_expression
              (qualified_identifier
                (lowercase_identifier))
              (accessor
                (dot_identifier
                  (dot_lowercase_identifier))))
            (accessor))
          (dot_identifier
            (dot_lowercase_identifier)))
        (dot_dot_identifier))
      (constructor_expression
        (package_identifier)
        (dot_uppercase_identifier)))))

================================================================================
can occur after semi (COLONCOLON)
================================================================================
fn main {
  T
  ::new()
  T
  ::{
    a
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (apply_expression
        (method_expression
          (type_name
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))
          (lowercase_identifier))
        (arguments))
      (struct_expression
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (struct_field_expression
          (labeled_expression_pun
            (lowercase_identifier)))))))

================================================================================
can occur after semi (FAT_ARROW)
:language(moonbit)
================================================================================
fn main {
  match a {
    1
    => {
    }
    _
    // default
    => {
    }
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (simple_pattern
              (literal
                (integer_literal))))
          (map_expression))
        (case_clause
          (pattern
            (simple_pattern))
          (comment)
          (map_expression))))))

================================================================================
can occur after semi (THIN_ARROW)
:language(moonbit)
================================================================================
fn f()
// a
-> Unit {
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (comment)
    (return_type
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression)))

================================================================================
can occur after semi (IN)
================================================================================
fn main {
  for x, y
  in a {
  }
  for
  x, y
  in a {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_in_expression
        (lowercase_identifier)
        (lowercase_identifier)
        (qualified_identifier
          (lowercase_identifier))
        (block_expression))
      (for_in_expression
        (lowercase_identifier)
        (lowercase_identifier)
        (qualified_identifier
          (lowercase_identifier))
        (block_expression)))))

================================================================================
can occur after semi (PIPE)
:language(moonbit)
================================================================================
fn main {
  a
  // a
  |> y
  // e
  #| c
  // d
  #| c
  |> println
  // f
  // k
  |> g()
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (qualified_identifier
          (lowercase_identifier))
        (comment)
        (qualified_identifier
          (lowercase_identifier)))
      (comment)
      (binary_expression
        (binary_expression
          (atomic_expression
            (literal
              (multiline_string_literal
                (multiline_string_fragment
                  (multiline_string_content))
                (comment)
                (multiline_string_fragment
                  (multiline_string_content)))))
          (qualified_identifier
            (lowercase_identifier)))
        (comment)
        (comment)
        (apply_expression
          (qualified_identifier
            (lowercase_identifier))
          (arguments))))))

================================================================================
can occur after semi (EQUAL)
================================================================================
typealias T
  = Int
traitalias D
  = Default
extern "c" fn x()
  = "a"
fn main {
  let x
  = 3
  let mut x
  = 3
  guard let 1 | 2
  = 4
  f(a
  =4)
  x
  = 6
  for x
  = 1; x < 10; x = x + 1 {
  }
}
--------------------------------------------------------------------------------

(structure
  (type_alias_definition
    (type_alias_targets
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (trait_alias_definition
    (trait_alias_targets
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (function_definition
    (external_linkage
      (string_literal
        (string_fragment
          (unescaped_string_fragment))))
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (external_source
      (string_literal
        (string_fragment
          (unescaped_string_fragment)))))
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (atomic_expression
          (literal
            (integer_literal))))
      (let_mut_expression
        (lowercase_identifier)
        (atomic_expression
          (literal
            (integer_literal))))
      (guard_let_expression
        (pattern
          (or_pattern
            (pattern
              (simple_pattern
                (literal
                  (integer_literal))))
            (pattern
              (simple_pattern
                (literal
                  (integer_literal))))))
        (atomic_expression
          (literal
            (integer_literal))))
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (labelled_argument
              (lowercase_identifier)
              (atomic_expression
                (literal
                  (integer_literal)))))))
      (assign_expression
        (left_value
          (qualified_identifier
            (lowercase_identifier)))
        (assign_operator)
        (atomic_expression
          (literal
            (integer_literal))))
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression)))))

================================================================================
can occur after semi (AUGMENTED_ASSIGNMENT)
================================================================================
fn main {
  x
  += y
  x
  -= y
  x
  *= y
  x
  /= y
  x
  %= y
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (assign_expression
        (left_value
          (qualified_identifier
            (lowercase_identifier)))
        (assign_operator)
        (qualified_identifier
          (lowercase_identifier)))
      (assign_expression
        (left_value
          (qualified_identifier
            (lowercase_identifier)))
        (assign_operator)
        (qualified_identifier
          (lowercase_identifier)))
      (assign_expression
        (left_value
          (qualified_identifier
            (lowercase_identifier)))
        (assign_operator)
        (qualified_identifier
          (lowercase_identifier)))
      (assign_expression
        (left_value
          (qualified_identifier
            (lowercase_identifier)))
        (assign_operator)
        (qualified_identifier
          (lowercase_identifier)))
      (assign_expression
        (left_value
          (qualified_identifier
            (lowercase_identifier)))
        (assign_operator)
        (qualified_identifier
          (lowercase_identifier))))))

================================================================================
can occur after semi (ELSE)
================================================================================
fn main {
  if true {
  }
  else {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (if_expression
        (atomic_expression
          (literal
            (boolean_literal)))
        (block_expression)
        (else_clause
          (block_expression))))))

================================================================================
can occur after semi (CATCH)
================================================================================
fn main {
  try f()
  catch {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (try_expression
        (apply_expression
          (qualified_identifier
            (lowercase_identifier))
          (arguments))
        (try_catch_clause)))))

================================================================================
can occur after semi (COMMA)
:language(moonbit)
================================================================================
fn main {
  loop 1, 2 {
    _, _ => continue 1
    // a
    // b
    , 2
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (loop_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal)))
        (matrix_case_clause
          (pattern
            (simple_pattern))
          (pattern
            (simple_pattern))
          (continue_expression
            (atomic_expression
              (literal
                (integer_literal)))
            (comment)
            (comment)
            (atomic_expression
              (literal
                (integer_literal)))))))))

================================================================================
can occur after semi (COLON)
================================================================================
fn f(a
: Int) -> Unit {
}

fn main {
  a[1
  :2]
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (parameters
      (parameter
        (positional_parameter
          (lowercase_identifier)
          (type_annotation
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))))))))
    (return_type
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression))
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (array_access_expression
        (qualified_identifier
          (lowercase_identifier))
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur after semi (BAR)
================================================================================
fn main {
  1
  | 2
  match a {
    1
    | 2 => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (or_pattern
              (pattern
                (simple_pattern
                  (literal
                    (integer_literal))))
              (pattern
                (simple_pattern
                  (literal
                    (integer_literal))))))
          (unit_expression))))))

================================================================================
can occur after semi (AS, IS)
================================================================================
fn main {
  as_
  as &T
  is_
  is Some(_)
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (as_expression
        (qualified_identifier
          (lowercase_identifier))
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))
      (is_expression
        (qualified_identifier
          (lowercase_identifier))
        (simple_pattern
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier))
            (constructor_pattern_argument
              (pattern
                (simple_pattern)))))))))

================================================================================
can occur after semi (DOTDOT)
================================================================================
fn main {
  a
  ..f()
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (dot_dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_dot_identifier)))))

================================================================================
can occur after semi (DERIVE)
:language(moonbit)
================================================================================
enum A {
} // a
derive(Show)

fn main {
  enum A {
  } // a
  derive(Show)
}
--------------------------------------------------------------------------------

(structure
  (enum_definition
    (identifier
      (uppercase_identifier))
    (comment)
    (derive_directive
      (derive_item
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (enum_definition
        (identifier
          (uppercase_identifier))
        (comment)
        (derive_directive
          (derive_item
            (type_name
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier))))))))))

================================================================================
can occur after semi (WITH)
:language(moonbit)
================================================================================
impl A for T
// a
with f() -> Unit {
}
--------------------------------------------------------------------------------

(structure
  (impl_definition
    (type_name
      (qualified_type_identifier
        (identifier
          (uppercase_identifier))))
    (type
      (apply_type
        (qualified_type_identifier
          (identifier
            (uppercase_identifier)))))
    (comment)
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (return_type
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression)))

================================================================================
can occur after semi (QUESTION)
================================================================================
fn main {
  f
?(2, 1)
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (apply_operator)
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal))))
          (argument
            (atomic_expression
              (literal
                (integer_literal)))))))))

================================================================================
can occur after semi (RANGE_INCLUSIVE, RANGE_EXCLUSIVE)
================================================================================
fn main {
  match a {
  1
  ..<_ => ()
  2
  ..=_ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern
                (literal
                  (integer_literal)))
              (simple_pattern)))
          (unit_expression))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern
                (literal
                  (integer_literal)))
              (simple_pattern)))
          (unit_expression))))))

================================================================================
can occur after semi (EXCLAMATION)
================================================================================
fn main {
  f
  !(1)
  g
  !!(2)
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (apply_operator)
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal))))))
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (apply_operator)
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal)))))))))
