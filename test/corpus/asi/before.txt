================================================================================
can occur before semi (MULTILINE_STRING)
================================================================================
fn main {
  #|1
  // a
  $|2
  // c
  #|3
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (atomic_expression
        (literal
          (multiline_string_literal
            (multiline_string_fragment
              (multiline_string_content))
            (comment)
            (multiline_interpolation_fragment
              (multiline_interpolation_content))
            (comment)
            (multiline_string_fragment
              (multiline_string_content))))))))

================================================================================
can occur before semi (RBRACE, RBRACKET, RPAREN)
================================================================================
fn main {
  { a }
  [ a ]
  ( a )
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (nonempty_block_expression
        (qualified_identifier
          (lowercase_identifier)))
      (array_expression
        (qualified_identifier
          (lowercase_identifier)))
      (tuple_expression
        (qualified_identifier
          (lowercase_identifier))))))

================================================================================
can occur before semi (BREAK, CONTINUE, RETURN)
================================================================================
fn main {
  break
  1
  continue
  2
  return
  4
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (break_expression)
      (atomic_expression
        (literal
          (integer_literal)))
      (continue_expression)
      (atomic_expression
        (literal
          (integer_literal)))
      (return_expression)
      (atomic_expression
        (literal
          (integer_literal))))))

================================================================================
can occur before semi (PLUS, MINUS)
================================================================================
fn main {
  let x = 1 +
    2
  let x = 1 -
    2
}

fn[X: Default +
Clone] f() -> Unit {
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (binary_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))))
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (binary_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))))))
  (function_definition
    (type_parameters
      (type_identifier
        (identifier
          (uppercase_identifier))
        (constraints
          (constraint
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))
          (constraint
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))))))
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (return_type
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression)))

================================================================================
can occur before semi (PACKAGE_NAME)
================================================================================
fn main {
  let x = @a
    .T
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (constructor_expression
          (package_identifier)
          (dot_uppercase_identifier))))))

================================================================================
can occur before semi (LET, MUTABLE)
================================================================================
fn main {
  let
    y = 2
  let mut
    x = 3
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (atomic_expression
          (literal
            (integer_literal))))
      (let_mut_expression
        (lowercase_identifier)
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (MATCH)
================================================================================
fn main {
  match
    x {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (simple_pattern))
          (unit_expression))))))

================================================================================
can occur before semi (TRY)
================================================================================
fn main {
  try
  f() catch {}
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (try_expression
        (apply_expression
          (qualified_identifier
            (lowercase_identifier))
          (arguments))
        (try_catch_clause)))))

================================================================================
can occur before semi (CATCH)
================================================================================
fn main {
  try f() catch
  {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (try_expression
        (apply_expression
          (qualified_identifier
            (lowercase_identifier))
          (arguments))
        (try_catch_clause)))))

================================================================================
can occur before semi (LPAREN)
================================================================================
fn main {
  f(
    1)
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (integer_literal)))))))))

================================================================================
can occur before semi (CONST)
================================================================================
const
  C = 1
--------------------------------------------------------------------------------

(structure
  (const_definition
    (uppercase_identifier)
    (atomic_expression
      (literal
        (integer_literal)))))

================================================================================
can occur before semi (LBRACKET)
================================================================================
fn main {
  a[
    1]
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (array_access_expression
        (qualified_identifier
          (lowercase_identifier))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (LBRACE)
================================================================================
fn main {
  {
    a
  }
  T::{
    a
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (nonempty_block_expression
        (qualified_identifier
          (lowercase_identifier)))
      (struct_expression
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (struct_field_expression
          (labeled_expression_pun
            (lowercase_identifier)))))))

================================================================================
can occur before semi (INFIX1)
================================================================================
fn main {
  1 >
  2
  2 <
  3
  3 ==
  4
  5 !=
  6
  7 >=
  8
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (INFIX2)
================================================================================
fn main {
  1 >>
  2
  3 <<
  4
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (PLUS, MINUS)
================================================================================
fn main {
  1 +
  2
  3 -
  4
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (INFIX3)
================================================================================
fn main {
  1 *
  2
  3 /
  4
  5 %
  6
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (IMPL)
================================================================================
impl
A for B with f() {
}
--------------------------------------------------------------------------------

(structure
  (impl_definition
    (type_name
      (qualified_type_identifier
        (identifier
          (uppercase_identifier))))
    (type
      (apply_type
        (qualified_type_identifier
          (identifier
            (uppercase_identifier)))))
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (block_expression)))

================================================================================
can occur before semi (IF)
================================================================================
fn main {
  if
  true {}
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (if_expression
        (atomic_expression
          (literal
            (boolean_literal)))
        (block_expression)))))

================================================================================
can occur before semi (GUARD)
================================================================================
fn main {
  guard
  let x =
  1
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (guard_let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (WHILE)
================================================================================
fn main {
  while
  true {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (while_expression
        (atomic_expression
          (literal
            (boolean_literal)))
        (block_expression)))))

================================================================================
can occur before semi (ASYNC)
================================================================================
async
fn f() {
}

fn main {
  let x = async
  fn {
  }
  async
  fn g() {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (block_expression))
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (anonymous_matrix_lambda_expression))
      (named_lambda_expression
        (lowercase_identifier)
        (parameters)
        (block_expression)))))

================================================================================
can occur before semi (FN)
================================================================================
fn
f() {
}

fn main {
  let x =
  fn
  // a
  {
  }
  fn
  // g
  g() {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (block_expression))
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (anonymous_matrix_lambda_expression
          (comment)))
      (named_lambda_expression
        (comment)
        (lowercase_identifier)
        (parameters)
        (block_expression)))))

================================================================================
can occur before semi (FAT_ARROW)
================================================================================
fn main {
  match x {
    _ =>
      // a
      #|1
      // b
      $|1
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (simple_pattern))
          (comment)
          (atomic_expression
            (literal
              (multiline_string_literal
                (multiline_string_fragment
                  (multiline_string_content))
                (comment)
                (multiline_interpolation_fragment
                  (multiline_interpolation_content))))))))))

================================================================================
can occur before semi (THIN_ARROW)
================================================================================
fn f() ->
/// a
Unit {
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (return_type
      (comment)
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression)))

================================================================================
can occur before semi (IN)
================================================================================
fn main {
  for x in
  // a
  // b
  [1, 2, 3] {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_in_expression
        (lowercase_identifier)
        (comment)
        (comment)
        (array_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal))))
        (block_expression)))))

================================================================================
can occur before semi (EQUAL)
================================================================================
fn main {
  let x =
  // 3
    3
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (comment)
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (AUGMENTED_ASSIGNMENT)
================================================================================
fn main {
  x +=
  2
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (assign_expression
        (left_value
          (qualified_identifier
            (lowercase_identifier)))
        (assign_operator)
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (ENUM)
================================================================================
enum
// E
E {
  A
  B
}
--------------------------------------------------------------------------------

(structure
  (enum_definition
    (comment)
    (identifier
      (uppercase_identifier))
    (enum_constructor
      (uppercase_identifier))
    (enum_constructor
      (uppercase_identifier))))

================================================================================
can occur before semi (ELSE)
================================================================================
fn main {
  if a {
  } else
  // a
  {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (if_expression
        (qualified_identifier
          (lowercase_identifier))
        (block_expression)
        (else_clause
          (comment)
          (block_expression))))))

================================================================================
can occur before semi (EXTERN)
================================================================================
extern
"c" fn f() = "a"
--------------------------------------------------------------------------------

(structure
  (function_definition
    (external_linkage
      (string_literal
        (string_fragment
          (unescaped_string_fragment))))
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (external_source
      (string_literal
        (string_fragment
          (unescaped_string_fragment))))))

================================================================================
can occur before semi (COMMA)
================================================================================
enum E {
  A(Int,
  Int)
}

fn main {
  continue 1,
  2
  (1,
  2)
  loop x,
  y {
  }
  for x = 1,
  y = 2; true; x = x + 1 {
  }
  for x,
  y in [1, 2, 3] {
  }
  T::{
    a,
    b
  }
}

fn f(a: Int,
b: Int) -> Unit {
}
--------------------------------------------------------------------------------

(structure
  (enum_definition
    (identifier
      (uppercase_identifier))
    (enum_constructor
      (uppercase_identifier)
      (enum_constructor_payload
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier))))))
        (constructor_parameter
          (type
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))))))))
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (continue_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (tuple_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (loop_expression
        (qualified_identifier
          (lowercase_identifier))
        (qualified_identifier
          (lowercase_identifier)))
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (atomic_expression
          (literal
            (boolean_literal)))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression))
      (for_in_expression
        (lowercase_identifier)
        (lowercase_identifier)
        (array_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal))))
        (block_expression))
      (struct_expression
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (struct_field_expression
          (labeled_expression_pun
            (lowercase_identifier)))
        (struct_field_expression
          (labeled_expression_pun
            (lowercase_identifier))))))
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (parameters
      (parameter
        (positional_parameter
          (lowercase_identifier)
          (type_annotation
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier))))))))
      (parameter
        (positional_parameter
          (lowercase_identifier)
          (type_annotation
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))))))))
    (return_type
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression)))

================================================================================
can occur before semi (COLON)
================================================================================
fn[X :
T] f(a :
Int) -> Unit {
  T::{
    a :
    // c
    b
  }
  a[1:
  2]
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (type_parameters
      (type_identifier
        (identifier
          (uppercase_identifier))
        (constraints
          (constraint
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))))))
    (function_identifier
      (lowercase_identifier))
    (parameters
      (parameter
        (positional_parameter
          (lowercase_identifier)
          (type_annotation
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))))))))
    (return_type
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression
      (struct_expression
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (struct_field_expression
          (labeled_expression
            (lowercase_identifier)
            (comment)
            (qualified_identifier
              (lowercase_identifier)))))
      (array_access_expression
        (qualified_identifier
          (lowercase_identifier))
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (BARBAR)
================================================================================
fn main {
  a ||
  // b
  b
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (qualified_identifier
          (lowercase_identifier))
        (comment)
        (qualified_identifier
          (lowercase_identifier))))))

================================================================================
can occur before semi (BAR)
================================================================================
fn main {
  a |
  // b
  b
  match x {
    A(a) |
    // b
    B(a) => {
    }
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (qualified_identifier
          (lowercase_identifier))
        (comment)
        (qualified_identifier
          (lowercase_identifier)))
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (or_pattern
              (pattern
                (simple_pattern
                  (constructor_pattern
                    (constructor_expression
                      (uppercase_identifier))
                    (constructor_pattern_argument
                      (pattern
                        (simple_pattern
                          (lowercase_identifier)))))))
              (comment)
              (pattern
                (simple_pattern
                  (constructor_pattern
                    (constructor_expression
                      (uppercase_identifier))
                    (constructor_pattern_argument
                      (pattern
                        (simple_pattern
                          (lowercase_identifier)))))))))
          (map_expression))))))

================================================================================
can occur before semi (AS)
================================================================================
fn main {
  a |
  // b
  b
  (is_ as &T)
  match x {
    A(asi) |
    // b
    B(ass) as
    as_ => {
    }
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (qualified_identifier
          (lowercase_identifier))
        (comment)
        (qualified_identifier
          (lowercase_identifier)))
      (tuple_expression
        (as_expression
          (qualified_identifier
            (lowercase_identifier))
          (type_name
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))))
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (as_pattern
              (pattern
                (or_pattern
                  (pattern
                    (simple_pattern
                      (constructor_pattern
                        (constructor_expression
                          (uppercase_identifier))
                        (constructor_pattern_argument
                          (pattern
                            (simple_pattern
                              (lowercase_identifier)))))))
                  (comment)
                  (pattern
                    (simple_pattern
                      (constructor_pattern
                        (constructor_expression
                          (uppercase_identifier))
                        (constructor_pattern_argument
                          (pattern
                            (simple_pattern
                              (lowercase_identifier)))))))))
              (lowercase_identifier)))
          (map_expression))))))

================================================================================
can occur before semi (IS)
================================================================================
fn main {
  is_ is true
  guard is_ is Some(is_) && as_ is Some(as_) else {
    3
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (is_expression
        (qualified_identifier
          (lowercase_identifier))
        (simple_pattern
          (literal
            (boolean_literal))))
      (guard_expression
        (binary_expression
          (is_expression
            (qualified_identifier
              (lowercase_identifier))
            (simple_pattern
              (constructor_pattern
                (constructor_expression
                  (uppercase_identifier))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (is_expression
            (qualified_identifier
              (lowercase_identifier))
            (simple_pattern
              (constructor_pattern
                (constructor_expression
                  (uppercase_identifier))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern
                      (lowercase_identifier))))))))
        (guard_else_expression
          (block_expression
            (atomic_expression
              (literal
                (integer_literal)))))))))

================================================================================
can occur before semi (AMPERAMPER)
================================================================================
fn main {
  a &&
  // b
  b
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (qualified_identifier
          (lowercase_identifier))
        (comment)
        (qualified_identifier
          (lowercase_identifier))))))

================================================================================
can occur before semi (DOTDOT)
================================================================================
fn main {
  T::{ .. // b
  // a
  a}
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (struct_expression
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (comment)
        (comment)
        (qualified_identifier
          (lowercase_identifier))))))

================================================================================
can occur before semi (PUB, PRIV, READONLY)
================================================================================
pub
fn f() -> Unit {
}

priv
struct S {
}

pub(readonly
) enum A {
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (visibility)
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (return_type
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression))
  (struct_definition
    (visibility)
    (identifier
      (uppercase_identifier)))
  (enum_definition
    (visibility
      (pub_attribute))
    (identifier
      (uppercase_identifier))))

================================================================================
can occur before semi (TRAIT)
================================================================================
trait
T {
}
--------------------------------------------------------------------------------

(structure
  (trait_definition
    (identifier
      (uppercase_identifier))))

================================================================================
can occur before semi (TRAITALIAS)
================================================================================
traitalias
T = TT
--------------------------------------------------------------------------------

(structure
  (trait_alias_definition
    (trait_alias_targets
      (identifier
        (uppercase_identifier))
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))))

================================================================================
can occur before semi (DERIVE)
================================================================================
type A Int derive
(Show)

fn main {
  enum E {} derive
  (Show)
}
--------------------------------------------------------------------------------

(structure
  (type_definition
    (identifier
      (uppercase_identifier))
    (type
      (apply_type
        (qualified_type_identifier
          (identifier
            (uppercase_identifier)))))
    (derive_directive
      (derive_item
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier)))))))
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (enum_definition
        (identifier
          (uppercase_identifier))
        (derive_directive
          (derive_item
            (type_name
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier))))))))))

================================================================================
can occur before semi (COLONCOLON)
================================================================================
fn main {
  T::
  {
    a
  }
  @a.T::
  Exit
  @a.T::
  new()
}

fn &T::
f() -> Unit {
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (struct_expression
        (type_name
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))
        (struct_field_expression
          (labeled_expression_pun
            (lowercase_identifier))))
      (constructor_expression
        (type_name
          (qualified_type_identifier
            (package_identifier)
            (dot_identifier
              (dot_uppercase_identifier))))
        (uppercase_identifier))
      (apply_expression
        (method_expression
          (type_name
            (qualified_type_identifier
              (package_identifier)
              (dot_identifier
                (dot_uppercase_identifier))))
          (lowercase_identifier))
        (arguments))))
  (function_definition
    (function_identifier
      (type_name
        (qualified_type_identifier
          (identifier
            (uppercase_identifier))))
      (lowercase_identifier))
    (parameters)
    (return_type
      (type
        (apply_type
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression)))

================================================================================
can occur before semi (TEST)
================================================================================
test
// a
{
}

test
// a
// b
"aa" {
}
--------------------------------------------------------------------------------

(structure
  (test_definition
    (comment)
    (block_expression))
  (test_definition
    (comment)
    (comment)
    (string_literal
      (string_fragment
        (unescaped_string_fragment)))
    (block_expression)))

================================================================================
can occur before semi (LOOP)
================================================================================
fn main {
  loop
  // a
  a, b {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (loop_expression
        (comment)
        (qualified_identifier
          (lowercase_identifier))
        (qualified_identifier
          (lowercase_identifier))))))

================================================================================
can occur before semi (FOR)
================================================================================
fn main {
  for
  // a
  a, b in [] {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_in_expression
        (comment)
        (lowercase_identifier)
        (lowercase_identifier)
        (array_expression)
        (block_expression)))))

================================================================================
can occur before semi (AMPER, CARET)
================================================================================
fn main {
  1 &
  2
  3 ^
  4
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal))))
      (binary_expression
        (atomic_expression
          (literal
            (integer_literal)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
can occur before semi (RAISE)
================================================================================
fn main {
  raise
  Error("a")
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (raise_expression)
      (apply_expression
        (constructor_expression
          (uppercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (string_literal
                  (string_fragment
                    (unescaped_string_fragment)))))))))))

================================================================================
cannot occur before semi (SEMI)
================================================================================
fn main {
  for i = 0;
    i < 10
    i = i + 1 {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression)))))
