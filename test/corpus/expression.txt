================================================================================
pipe operator
================================================================================
fn init() { 1 * 5 |> f(5) |> g  }
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (block_expression
      (binary_expression
        (binary_expression
          (binary_expression
            (atomic_expression
              (literal
                (integer_literal)))
            (atomic_expression
              (literal
                (integer_literal))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (integer_literal)))))))
        (qualified_identifier
          (lowercase_identifier))))))

================================================================================
match expression
================================================================================
fn init {
  match x {
    A => return
    B => return 1
    C => i = i + 1
    D => break
    E => continue
    F => while true {}
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier)))
          (return_expression))
        (case_clause
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier)))
          (return_expression
            (atomic_expression
              (literal
                (integer_literal)))))
        (case_clause
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier)))
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator)
            (binary_expression
              (qualified_identifier
                (lowercase_identifier))
              (atomic_expression
                (literal
                  (integer_literal))))))
        (case_clause
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier)))
          (break_expression))
        (case_clause
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier)))
          (continue_expression))
        (case_clause
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier)))
          (while_expression
            (atomic_expression
              (literal
                (boolean_literal)))
            (block_expression)))))))

================================================================================
struct construction
================================================================================
fn init() { let a = A::{ ..id, name: "John Doe" } }
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (parameters)
    (block_expression
      (let_expression
        (lowercase_identifier)
        (struct_expression
          (type_name
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))
          (qualified_identifier
            (lowercase_identifier))
          (struct_field_expression
            (labeled_expression
              (lowercase_identifier)
              (atomic_expression
                (literal
                  (string_literal
                    (string_fragment
                      (unescaped_string_fragment))))))))))))

================================================================================
map expression
================================================================================
fn main {
  let a = { "a" : 1, "b" : 2, 3 : "c" }
  let b = {}
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (lowercase_identifier)
        (map_expression
          (map_element_expression
            (map_element_key
              (literal
                (string_literal
                  (string_fragment
                    (unescaped_string_fragment)))))
            (atomic_expression
              (literal
                (integer_literal))))
          (map_element_expression
            (map_element_key
              (literal
                (string_literal
                  (string_fragment
                    (unescaped_string_fragment)))))
            (atomic_expression
              (literal
                (integer_literal))))
          (map_element_expression
            (map_element_key
              (literal
                (integer_literal)))
            (atomic_expression
              (literal
                (string_literal
                  (string_fragment
                    (unescaped_string_fragment))))))))
      (let_expression
        (lowercase_identifier)
        (map_expression)))))

================================================================================
binary expression
================================================================================
fn main {
  let a = 1 == 2
  let b = 3 != 4
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (lowercase_identifier)
        (binary_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))))
      (let_expression
        (lowercase_identifier)
        (binary_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal))))))))

================================================================================
assign expression
================================================================================
fn main {
  a += 3
  b += 4
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (assign_expression
        (left_value
          (qualified_identifier
            (lowercase_identifier)))
        (assign_operator)
        (atomic_expression
          (literal
            (integer_literal))))
      (assign_expression
        (left_value
          (qualified_identifier
            (lowercase_identifier)))
        (assign_operator)
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
array access expression
================================================================================
fn main {
  let a = b[1:]
  let b = c[:]
  let d = c[:1]
  let e = c[1:3]
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (lowercase_identifier)
        (array_access_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal)))))
      (let_expression
        (lowercase_identifier)
        (array_access_expression
          (qualified_identifier
            (lowercase_identifier))))
      (let_expression
        (lowercase_identifier)
        (array_access_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal)))))
      (let_expression
        (lowercase_identifier)
        (array_access_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal))))))))

================================================================================
boolean expression
================================================================================
fn main {
  let a = 1 | 2 && 3 & 4 || 5
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (lowercase_identifier)
        (binary_expression
          (binary_expression
            (binary_expression
              (atomic_expression
                (literal
                  (integer_literal)))
              (atomic_expression
                (literal
                  (integer_literal))))
            (binary_expression
              (atomic_expression
                (literal
                  (integer_literal)))
              (atomic_expression
                (literal
                  (integer_literal)))))
          (atomic_expression
            (literal
              (integer_literal))))))))

================================================================================
shift expression
================================================================================
fn main {
  let a = 1 >> 2 | 2 << 3 && 3 >> 4 & 4 << 5 || 5 >> 6
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (lowercase_identifier)
        (binary_expression
          (binary_expression
            (binary_expression
              (binary_expression
                (atomic_expression
                  (literal
                    (integer_literal)))
                (atomic_expression
                  (literal
                    (integer_literal))))
              (binary_expression
                (atomic_expression
                  (literal
                    (integer_literal)))
                (atomic_expression
                  (literal
                    (integer_literal)))))
            (binary_expression
              (binary_expression
                (atomic_expression
                  (literal
                    (integer_literal)))
                (atomic_expression
                  (literal
                    (integer_literal))))
              (binary_expression
                (atomic_expression
                  (literal
                    (integer_literal)))
                (atomic_expression
                  (literal
                    (integer_literal))))))
          (binary_expression
            (atomic_expression
              (literal
                (integer_literal)))
            (atomic_expression
              (literal
                (integer_literal)))))))))

================================================================================
xor expression
================================================================================
fn main {
  let a = 1 ^ 2 | 2 ^ 3 && 3 ^ 4 & 4 ^ 5 || 5 ^ 6 >> 7 ^ 8 << 8 ^ 9
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (lowercase_identifier)
        (binary_expression
          (binary_expression
            (binary_expression
              (binary_expression
                (atomic_expression
                  (literal
                    (integer_literal)))
                (atomic_expression
                  (literal
                    (integer_literal))))
              (binary_expression
                (atomic_expression
                  (literal
                    (integer_literal)))
                (atomic_expression
                  (literal
                    (integer_literal)))))
            (binary_expression
              (binary_expression
                (atomic_expression
                  (literal
                    (integer_literal)))
                (binary_expression
                  (atomic_expression
                    (literal
                      (integer_literal)))
                  (atomic_expression
                    (literal
                      (integer_literal)))))
              (atomic_expression
                (literal
                  (integer_literal)))))
          (binary_expression
            (binary_expression
              (binary_expression
                (atomic_expression
                  (literal
                    (integer_literal)))
                (binary_expression
                  (atomic_expression
                    (literal
                      (integer_literal)))
                  (atomic_expression
                    (literal
                      (integer_literal)))))
              (binary_expression
                (atomic_expression
                  (literal
                    (integer_literal)))
                (atomic_expression
                  (literal
                    (integer_literal)))))
            (atomic_expression
              (literal
                (integer_literal)))))))))

================================================================================
as expression
================================================================================
fn main {
  (a as &Logger).write_string("Hello")
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (dot_apply_expression
        (parenthesized_expression
          (as_expression
            (qualified_identifier
              (lowercase_identifier))
            (type_name
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier))))))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (atomic_expression
            (literal
              (string_literal
                (string_fragment
                  (unescaped_string_fragment))))))))))

================================================================================
is expression
================================================================================
fn main {
  a is None
  b is Some(3)
  c is '\b'..='\r'
  d is '\u0600'..='\u0666'
  guard e
  guard f is None
  guard g is Some(3)
  guard h is '\b'..='\r' else {
    4
  }
  i
  is ('\u0600'..='\u0666' | '\u0667'..='\u0668')
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (is_expression
        (qualified_identifier
          (lowercase_identifier))
        (constructor_pattern
          (constructor_expression
            (uppercase_identifier))))
      (is_expression
        (qualified_identifier
          (lowercase_identifier))
        (constructor_pattern
          (constructor_expression
            (uppercase_identifier))
          (constructor_pattern_argument
            (atomic_pattern
              (literal
                (integer_literal))))))
      (is_expression
        (qualified_identifier
          (lowercase_identifier))
        (range_pattern
          (atomic_pattern
            (literal
              (char_literal
                (escape_sequence))))
          (atomic_pattern
            (literal
              (char_literal
                (escape_sequence))))))
      (is_expression
        (qualified_identifier
          (lowercase_identifier))
        (range_pattern
          (atomic_pattern
            (literal
              (char_literal
                (escape_sequence))))
          (atomic_pattern
            (literal
              (char_literal
                (escape_sequence))))))
      (guard_expression
        (qualified_identifier
          (lowercase_identifier)))
      (guard_expression
        (is_expression
          (qualified_identifier
            (lowercase_identifier))
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier)))))
      (guard_expression
        (is_expression
          (qualified_identifier
            (lowercase_identifier))
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier))
            (constructor_pattern_argument
              (atomic_pattern
                (literal
                  (integer_literal)))))))
      (guard_expression
        (is_expression
          (qualified_identifier
            (lowercase_identifier))
          (range_pattern
            (atomic_pattern
              (literal
                (char_literal
                  (escape_sequence))))
            (atomic_pattern
              (literal
                (char_literal
                  (escape_sequence))))))
        (guard_else_expression
          (block_expression
            (atomic_expression
              (literal
                (integer_literal))))))
      (is_expression
        (qualified_identifier
          (lowercase_identifier))
        (parenthesized_pattern
          (or_pattern
            (range_pattern
              (atomic_pattern
                (literal
                  (char_literal
                    (escape_sequence))))
              (atomic_pattern
                (literal
                  (char_literal
                    (escape_sequence)))))
            (range_pattern
              (atomic_pattern
                (literal
                  (char_literal
                    (escape_sequence))))
              (atomic_pattern
                (literal
                  (char_literal
                    (escape_sequence)))))))))))

================================================================================
unfinished
================================================================================
fn main {
  println("a")
  ...
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (arguments
          (argument
            (atomic_expression
              (literal
                (string_literal
                  (string_fragment
                    (unescaped_string_fragment))))))))
      (unfinished))))
