================================================================================
pipe operator
================================================================================
fn init() { 1 * 5 |> f(5) |> g  }
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (binary_expression
                (simple_expression
                  (binary_expression
                    (simple_expression
                      (binary_expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal))))))
                    (pipe_operator)
                    (simple_expression
                      (apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))
                        (argument
                          (expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))))))))
                (pipe_operator)
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))))))))))

================================================================================
match expression
================================================================================
fn init() {
  match x {
    A => return
    B => return 1
    C => i = i + 1
    D => break
    E => continue
    F => while true {}
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression
        (statement_expression
          (expression
            (match_expression
              (simple_expression
                (qualified_identifier
                  (lowercase_identifier)))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (case_clause_body
                  (return_expression)))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (case_clause_body
                  (return_expression
                    (expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))))))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (case_clause_body
                  (assign_expression
                    (left_value
                      (qualified_identifier
                        (lowercase_identifier)))
                    (expression
                      (simple_expression
                        (binary_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier)))
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (case_clause_body))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (case_clause_body))
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier)))))
                (case_clause_body
                  (while_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (boolean_literal))))
                    (block_expression)))))))))))

================================================================================
struct construction
================================================================================
fn init() { let a = A::{ ..id, name: "John Doe" } }
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (parameters)
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (struct_expression
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))
                  (colon_colon)
                  (dot_dot)
                  (expression
                    (simple_expression
                      (qualified_identifier
                        (lowercase_identifier))))
                  (struct_field_expressions
                    (labeled_expression
                      (lowercase_identifier)
                      (colon)
                      (expression
                        (simple_expression
                          (atomic_expression
                            (literal
                              (string_literal
                                (string_fragment
                                  (unescaped_string_fragment))))))))))))))))))

================================================================================
map expression
================================================================================
fn main {
  let a = { "a" : 1, "b" : 2, 3 : "c" }
  let b = {}
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (map_expression
                  (map_entry_expression
                    (literal
                      (string_literal
                        (string_fragment
                          (unescaped_string_fragment))))
                    (colon)
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (map_entry_expression
                    (literal
                      (string_literal
                        (string_fragment
                          (unescaped_string_fragment))))
                    (colon)
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (map_entry_expression
                    (literal
                      (integer_literal))
                    (colon)
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (unescaped_string_fragment))))))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (map_expression)))))))))

================================================================================
binary expression
================================================================================
fn main {
  let a = 1 == 2
  let b = 3 != 4
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (binary_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal))))
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (binary_expression
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal))))
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))))))

================================================================================
assign expression
================================================================================
fn main {
  a += 3
  b += 4
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (integer_literal)))))))
        (statement_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (integer_literal)))))))))))

================================================================================
array access expression
================================================================================
fn main {
  let a = b[1:]
  let b = c[:]
  let d = c[:1]
  let e = c[1:3]
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (array_access_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (colon))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (array_access_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (colon))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (array_access_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (colon)
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (array_access_expression
                  (simple_expression
                    (qualified_identifier
                      (lowercase_identifier)))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal)))))
                  (colon)
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))))))

================================================================================
boolean expression
================================================================================
fn main {
  let a = 1 | 2 && 3 & 4 || 5
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (binary_expression
                  (simple_expression
                    (binary_expression
                      (simple_expression
                        (binary_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))
                      (simple_expression
                        (binary_expression
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))
                  (simple_expression
                    (atomic_expression
                      (literal
                        (integer_literal)))))))))))))

================================================================================
shift expression
================================================================================
fn main {
  let a = 1 >> 2 | 2 << 3 && 3 >> 4 & 4 << 5 || 5 >> 6
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (binary_expression
                  (simple_expression
                    (binary_expression
                      (simple_expression
                        (binary_expression
                          (simple_expression
                            (binary_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))))
                          (simple_expression
                            (binary_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))))))
                      (simple_expression
                        (binary_expression
                          (simple_expression
                            (binary_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))))
                          (simple_expression
                            (binary_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))))))))
                  (simple_expression
                    (binary_expression
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal))))
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))))))

================================================================================
xor expression
================================================================================
fn main {
  let a = 1 ^ 2 | 2 ^ 3 && 3 ^ 4 & 4 ^ 5 || 5 ^ 6 >> 7 ^ 8 << 8 ^ 9
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (binary_expression
                  (simple_expression
                    (binary_expression
                      (simple_expression
                        (binary_expression
                          (simple_expression
                            (binary_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))))
                          (simple_expression
                            (binary_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))))))
                      (simple_expression
                        (binary_expression
                          (simple_expression
                            (binary_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))
                              (simple_expression
                                (binary_expression
                                  (simple_expression
                                    (atomic_expression
                                      (literal
                                        (integer_literal))))
                                  (simple_expression
                                    (atomic_expression
                                      (literal
                                        (integer_literal))))))))
                          (simple_expression
                            (atomic_expression
                              (literal
                                (integer_literal))))))))
                  (simple_expression
                    (binary_expression
                      (simple_expression
                        (binary_expression
                          (simple_expression
                            (binary_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))
                              (simple_expression
                                (binary_expression
                                  (simple_expression
                                    (atomic_expression
                                      (literal
                                        (integer_literal))))
                                  (simple_expression
                                    (atomic_expression
                                      (literal
                                        (integer_literal))))))))
                          (simple_expression
                            (binary_expression
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))
                              (simple_expression
                                (atomic_expression
                                  (literal
                                    (integer_literal))))))))
                      (simple_expression
                        (atomic_expression
                          (literal
                            (integer_literal)))))))))))))))

================================================================================
as expression
================================================================================
fn main {
  (a as &Logger).write_string("Hello")
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (dot_apply_expression
                (simple_expression
                  (tuple_expression
                    (expression
                      (simple_expression
                        (as_expression
                          (simple_expression
                            (qualified_identifier
                              (lowercase_identifier)))
                          (qualified_type_identifier
                            (identifier
                              (uppercase_identifier))))))))
                (dot_identifier
                  (dot))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (unescaped_string_fragment))))))))))))))))
