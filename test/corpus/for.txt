================================================================================
for
================================================================================
fn init {
  for i = 0; i < 10; i = i + 1 {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression)))))

================================================================================
forever
================================================================================
fn init {
  for i = 0; i < 10; {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (block_expression)))))

================================================================================
simple for
================================================================================
fn init {
  for i = 0 {
    i = i + 1
    continue i + 1
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (block_expression
          (assign_expression
            (left_value
              (qualified_identifier
                (lowercase_identifier)))
            (assign_operator)
            (binary_expression
              (qualified_identifier
                (lowercase_identifier))
              (atomic_expression
                (literal
                  (integer_literal)))))
          (continue_expression
            (binary_expression
              (qualified_identifier
                (lowercase_identifier))
              (atomic_expression
                (literal
                  (integer_literal))))))))))

================================================================================
for-in
================================================================================
fn init {
  let a = [1, 2, 3, 4, 5]
  for i in a {
    i
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (array_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))))
      (for_in_expression
        (lowercase_identifier)
        (qualified_identifier
          (lowercase_identifier))
        (block_expression
          (qualified_identifier
            (lowercase_identifier)))))))

================================================================================
for-else
================================================================================
fn init {
  for i = 0; i < 10; i = i + 1 {
    i
  } else {
    0
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression
          (qualified_identifier
            (lowercase_identifier)))
        (else_clause
          (block_expression
            (atomic_expression
              (literal
                (integer_literal)))))))))

================================================================================
for-in-else
================================================================================
fn init {
  let a = [1, 2, 3, 4, 5]
  for i in a {
    i
  } else {
    0
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (array_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))))
      (for_in_expression
        (lowercase_identifier)
        (qualified_identifier
          (lowercase_identifier))
        (block_expression
          (qualified_identifier
            (lowercase_identifier)))
        (else_clause
          (block_expression
            (atomic_expression
              (literal
                (integer_literal)))))))))

================================================================================
for in range
================================================================================
fn main {
  for i in 0..<array.length() {
  }
  for j in 1..=array.length() {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_in_expression
        (lowercase_identifier)
        (range_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (dot_apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (dot_identifier
              (dot_lowercase_identifier))))
        (block_expression))
      (for_in_expression
        (lowercase_identifier)
        (range_expression
          (atomic_expression
            (literal
              (integer_literal)))
          (dot_apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (dot_identifier
              (dot_lowercase_identifier))))
        (block_expression)))))

================================================================================
for with line break
================================================================================
fn init {
  for i = 0
      i < 10
      i = i + 1 {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression)))))

================================================================================
for with loop
================================================================================
fn main {
  label~: for x in xs {
    println(x)
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_in_expression
        (loop_label
          (label
            (lowercase_identifier)))
        (lowercase_identifier)
        (qualified_identifier
          (lowercase_identifier))
        (block_expression
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (qualified_identifier
                  (lowercase_identifier))))))))))

================================================================================
for asi
================================================================================
fn main {
  for i = 0; i < 10; i = i + 1 {
  }
  for
    i = 0
    i < 10
    i = i + 1 {
  }
  for
    i = 0;
    i < 10;
    i = i + 1 {
  }
  for
    i = 0
    ;i < 10
    ;i = i + 1 {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression))
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression))
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression))
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression)))))

================================================================================
for asi with comments
:language(moonbit)
================================================================================
fn main {
  for // a
    i = 0
    // b
    i < 10
    // c
    i = i + 1 {
  }
  for i = 0 // a
    i < 10 // b
    i = i + 1 // c
  {
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (for_expression
        (comment)
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (comment)
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (comment)
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (block_expression))
      (for_expression
        (for_binder
          (lowercase_identifier)
          (atomic_expression
            (literal
              (integer_literal))))
        (comment)
        (binary_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal))))
        (comment)
        (for_binder
          (lowercase_identifier)
          (binary_expression
            (qualified_identifier
              (lowercase_identifier))
            (atomic_expression
              (literal
                (integer_literal)))))
        (comment)
        (block_expression)))))
