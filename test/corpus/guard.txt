================================================================================
guard
================================================================================
fn init {
  guard 1 > 2 && 2 < 3
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_expression
            (simple_expression
              (binary_expression
                (simple_expression
                  (binary_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))
                (simple_expression
                  (binary_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))))))

================================================================================
guard with else
================================================================================
fn init {
  guard 1 > 2 && 2 < 3 else {
    return
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_expression
            (simple_expression
              (binary_expression
                (simple_expression
                  (binary_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))
                (simple_expression
                  (binary_expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))
            (guard_else_expression
              (block_expression
                (statement_expression
                  (return_expression))))))))))

================================================================================
guard let
================================================================================
fn init {
  guard let None = Some(3)
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_let_expression
            (pattern
              (simple_pattern
                (constructor_pattern
                  (constructor_expression
                    (uppercase_identifier)))))
            (simple_expression
              (apply_expression
                (simple_expression
                  (constructor_expression
                    (uppercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))))))))

================================================================================
guard let with else
================================================================================
fn init {
  guard let None = Some(3) else {
    Some(_) => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_let_expression
            (pattern
              (simple_pattern
                (constructor_pattern
                  (constructor_expression
                    (uppercase_identifier)))))
            (simple_expression
              (apply_expression
                (simple_expression
                  (constructor_expression
                    (uppercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (integer_literal))))))))
            (guard_let_else_expression
              (case_clause
                (pattern
                  (simple_pattern
                    (constructor_pattern
                      (constructor_expression
                        (uppercase_identifier))
                      (pattern
                        (simple_pattern)))))
                (case_clause_body
                  (expression
                    (simple_expression
                      (unit_expression))))))))))))

================================================================================
guard is
================================================================================
fn init {
  guard a is Some(3) else {
    return
  }
  guard b is None
}

pub fn View::iter[A](self : View[A]) -> Iter[A] {
  Iter::new(fn(yield_) {
    for v in self {
      guard yield_(v) is IterContinue else { break IterEnd }

    } else {
      IterContinue
    }
  })
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (guard_is_expression
            (simple_expression
              (qualified_identifier
                (lowercase_identifier)))
            (pattern
              (simple_pattern
                (constructor_pattern
                  (constructor_expression
                    (uppercase_identifier))
                  (pattern
                    (simple_pattern
                      (literal
                        (integer_literal)))))))
            (guard_else_expression
              (block_expression
                (statement_expression
                  (return_expression))))))
        (statement_expression
          (guard_is_expression
            (simple_expression
              (qualified_identifier
                (lowercase_identifier)))
            (pattern
              (simple_pattern
                (constructor_pattern
                  (constructor_expression
                    (uppercase_identifier))))))))))
  (structure_item
    (function_definition
      (visibility)
      (function_identifier
        (qualified_type_identifier
          (identifier
            (uppercase_identifier)))
        (colon_colon)
        (lowercase_identifier))
      (type_parameters
        (type_identifier
          (identifier
            (uppercase_identifier))))
      (parameters
        (parameter
          (lowercase_identifier)
          (type_annotation
            (colon)
            (type
              (apply_type
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))
                (type_arguments
                  (type
                    (apply_type
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier)))))))))))
      (return_type
        (type
          (apply_type
            (qualified_type_identifier
              (identifier
                (uppercase_identifier)))
            (type_arguments
              (type
                (apply_type
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))))))))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (method_expression
                    (qualified_type_identifier
                      (identifier
                        (uppercase_identifier)))
                    (colon_colon)
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (anonymous_lambda_expression
                        (parameters
                          (parameter
                            (lowercase_identifier)))
                        (block_expression
                          (statement_expression
                            (expression
                              (for_in_expression
                                (lowercase_identifier)
                                (simple_expression
                                  (qualified_identifier
                                    (lowercase_identifier)))
                                (block_expression
                                  (statement_expression
                                    (guard_is_expression
                                      (simple_expression
                                        (apply_expression
                                          (simple_expression
                                            (qualified_identifier
                                              (lowercase_identifier)))
                                          (argument
                                            (expression
                                              (simple_expression
                                                (qualified_identifier
                                                  (lowercase_identifier)))))))
                                      (pattern
                                        (simple_pattern
                                          (constructor_pattern
                                            (constructor_expression
                                              (uppercase_identifier)))))
                                      (guard_else_expression
                                        (block_expression
                                          (statement_expression
                                            (break_expression
                                              (expression
                                                (simple_expression
                                                  (constructor_expression
                                                    (uppercase_identifier)))))))))))
                                (else_clause
                                  (block_expression
                                    (statement_expression
                                      (expression
                                        (simple_expression
                                          (constructor_expression
                                            (uppercase_identifier)))))))))))))))))))))))
