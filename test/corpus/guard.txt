================================================================================
guard
================================================================================
fn init {
  guard 1 > 2 && 2 < 3
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (guard_expression
        (binary_expression
          (binary_expression
            (atomic_expression
              (literal
                (integer_literal)))
            (atomic_expression
              (literal
                (integer_literal))))
          (binary_expression
            (atomic_expression
              (literal
                (integer_literal)))
            (atomic_expression
              (literal
                (integer_literal)))))))))

================================================================================
guard with else
================================================================================
fn init {
  guard 1 > 2 && 2 < 3 else {
    return
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (guard_expression
        (binary_expression
          (binary_expression
            (atomic_expression
              (literal
                (integer_literal)))
            (atomic_expression
              (literal
                (integer_literal))))
          (binary_expression
            (atomic_expression
              (literal
                (integer_literal)))
            (atomic_expression
              (literal
                (integer_literal)))))
        (guard_else_expression
          (block_expression
            (return_expression)))))))

================================================================================
guard let
================================================================================
fn init {
  guard let None = Some(3)
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (guard_let_expression
        (constructor_pattern
          (constructor_expression
            (uppercase_identifier)))
        (apply_expression
          (constructor_expression
            (uppercase_identifier))
          (arguments
            (argument
              (atomic_expression
                (literal
                  (integer_literal))))))))))

================================================================================
guard let with else
================================================================================
fn init {
  guard let None = Some(3) else {
    Some(_) => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (guard_let_expression
        (constructor_pattern
          (constructor_expression
            (uppercase_identifier)))
        (apply_expression
          (constructor_expression
            (uppercase_identifier))
          (arguments
            (argument
              (atomic_expression
                (literal
                  (integer_literal))))))
        (guard_let_else_expression
          (case_clause
            (constructor_pattern
              (constructor_expression
                (uppercase_identifier))
              (constructor_pattern_argument
                (any_pattern)))
            (unit_expression)))))))

================================================================================
guard is
================================================================================
fn init {
  guard a is Some(3) else {
    return
  }
  guard b is None
}

pub fn[A] View::iter(self : View[A]) -> Iter[A] {
  Iter::new(fn(yield_) {
    for v in self {
      guard yield_(v) is IterContinue else { break IterEnd }

    } else {
      IterContinue
    }
  })
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (guard_expression
        (is_expression
          (qualified_identifier
            (lowercase_identifier))
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier))
            (constructor_pattern_argument
              (atomic_pattern
                (literal
                  (integer_literal))))))
        (guard_else_expression
          (block_expression
            (return_expression))))
      (guard_expression
        (is_expression
          (qualified_identifier
            (lowercase_identifier))
          (constructor_pattern
            (constructor_expression
              (uppercase_identifier)))))))
  (function_definition
    (visibility)
    (type_parameters
      (type_identifier
        (identifier
          (uppercase_identifier))))
    (function_identifier
      (type_name
        (qualified_type_identifier
          (identifier
            (uppercase_identifier))))
      (lowercase_identifier))
    (parameters
      (parameter
        (positional_parameter
          (lowercase_identifier)
          (type_annotation
            (apply_type
              (qualified_type_identifier
                (identifier
                  (uppercase_identifier)))
              (type_arguments
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))))))))
    (return_type
      (apply_type
        (qualified_type_identifier
          (identifier
            (uppercase_identifier)))
        (type_arguments
          (qualified_type_identifier
            (identifier
              (uppercase_identifier))))))
    (block_expression
      (apply_expression
        (method_expression
          (type_name
            (qualified_type_identifier
              (identifier
                (uppercase_identifier))))
          (lowercase_identifier))
        (arguments
          (argument
            (anonymous_lambda_expression
              (parameters
                (parameter
                  (positional_parameter
                    (lowercase_identifier))))
              (block_expression
                (for_in_expression
                  (lowercase_identifier)
                  (qualified_identifier
                    (lowercase_identifier))
                  (block_expression
                    (guard_expression
                      (is_expression
                        (apply_expression
                          (qualified_identifier
                            (lowercase_identifier))
                          (arguments
                            (argument
                              (qualified_identifier
                                (lowercase_identifier)))))
                        (constructor_pattern
                          (constructor_expression
                            (uppercase_identifier))))
                      (guard_else_expression
                        (block_expression
                          (break_expression
                            (constructor_expression
                              (uppercase_identifier)))))))
                  (else_clause
                    (block_expression
                      (constructor_expression
                        (uppercase_identifier)))))))))))))
