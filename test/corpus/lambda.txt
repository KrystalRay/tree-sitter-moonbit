================================================================================
basic
================================================================================
fn init {
  fn (x: Int) {
    x
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (anonymous_lambda_expression
        (parameters
          (parameter
            (positional_parameter
              (lowercase_identifier)
              (type_annotation
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))))))
        (block_expression
          (qualified_identifier
            (lowercase_identifier)))))))

================================================================================
one-line
================================================================================
fn init {
  fn (x: Int) { x }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (anonymous_lambda_expression
        (parameters
          (parameter
            (positional_parameter
              (lowercase_identifier)
              (type_annotation
                (qualified_type_identifier
                  (identifier
                    (uppercase_identifier)))))))
        (block_expression
          (qualified_identifier
            (lowercase_identifier)))))))

================================================================================
lambda_curry
================================================================================
fn init {
  let gt = fn (a : Int) { fn (b : Int) { a > b } }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (anonymous_lambda_expression
          (parameters
            (parameter
              (positional_parameter
                (lowercase_identifier)
                (type_annotation
                  (qualified_type_identifier
                    (identifier
                      (uppercase_identifier)))))))
          (block_expression
            (anonymous_lambda_expression
              (parameters
                (parameter
                  (positional_parameter
                    (lowercase_identifier)
                    (type_annotation
                      (qualified_type_identifier
                        (identifier
                          (uppercase_identifier)))))))
              (block_expression
                (binary_expression
                  (qualified_identifier
                    (lowercase_identifier))
                  (qualified_identifier
                    (lowercase_identifier)))))))))))

================================================================================
matrix functions
================================================================================
fn init {
  fn boolean_or {
    true, _ => true
    _, true => true
    _, _    => false
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (named_matrix_expression
        (lowercase_identifier)
        (matrix_case_clause
          (pattern
            (simple_pattern
              (literal
                (boolean_literal))))
          (pattern
            (simple_pattern))
          (atomic_expression
            (literal
              (boolean_literal))))
        (matrix_case_clause
          (pattern
            (simple_pattern))
          (pattern
            (simple_pattern
              (literal
                (boolean_literal))))
          (atomic_expression
            (literal
              (boolean_literal))))
        (matrix_case_clause
          (pattern
            (simple_pattern))
          (pattern
            (simple_pattern))
          (atomic_expression
            (literal
              (boolean_literal))))))))

================================================================================
matrix functions complex
================================================================================
fn init {
  let _ = fn { x => x + 1 }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern))
        (anonymous_matrix_lambda_expression
          (matrix_case_clause
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (binary_expression
              (qualified_identifier
                (lowercase_identifier))
              (atomic_expression
                (literal
                  (integer_literal))))))))))
