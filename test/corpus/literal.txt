================================================================================
escaping chars
================================================================================
fn init {
  println('\x78')
  println("\o377")
  println("\u{20BB7}")
  println("\u6211")
  println("\u6221å¥½\n")
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (char_literal
                            (escape_sequence)))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (escape_sequence))))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (escape_sequence))))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (escape_sequence))))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (escape_sequence))
                            (string_fragment
                              (unescaped_string_fragment))
                            (string_fragment
                              (escape_sequence))))))))))))))))

================================================================================
byte literal
================================================================================
fn init {
  let b1 = b'a'
  println(b1.to_int())
  let b2 = b'\xff'
  println(b2.to_int())
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (byte_literal)))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (dot_apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))
                        (dot_identifier
                          (dot))))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (byte_literal
                      (escape_sequence))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (dot_apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))
                        (dot_identifier
                          (dot))))))))))))))

================================================================================
interpolation
================================================================================
fn main {
  println("hello, \{name}")
    abort("Index length does not match tensor shape \{asdf}")
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (string_interpolation
                          (string_fragment
                            (unescaped_string_fragment))
                          (interpolator
                            (expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier))))))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (string_interpolation
                          (string_fragment
                            (unescaped_string_fragment))
                          (interpolator
                            (expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier))))))))))))))))))

================================================================================
bytes literal
================================================================================
fn init {
  let b1 = b"a"
  println(b1.to_int())
  println(b"asdfasdf")
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (bytes_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (dot_apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))
                        (dot_identifier
                          (dot))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (bytes_literal
                            (string_fragment
                              (unescaped_string_fragment))))))))))))))))

================================================================================
integer literal
================================================================================
fn main {
  let a = 1
  let b = 1U
  let c = 1L
  let d = 1UL
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (integer_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (integer_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (integer_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (integer_literal)))))))))))

================================================================================
bigint literal
================================================================================
fn main {
  let a = 0N
  let b = 0x1aN
  let c = 0b100N
  let d = 0o1237N
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (bigint_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (bigint_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (bigint_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (bigint_literal)))))))))))

================================================================================
float literal
================================================================================
fn main {
  let a = 0.01
  let b = 0.0
  let c = 0x0.1Fp+0
  let d = 0.1e3
  let array = [
    0x1.661ec79f8f3bep+0, 0x1.571ed4aaf883dp+0, 0x1.49539f0f010bp+0, 0x1.3c995b0b80385p+0,
    0x1.30d190c8864a5p+0, 0x1.25e227b0b8eap+0, 0x1.1bb4a4a1a343fp+0, 0x1.12358f08ae5bap+0,
    0x1.0953f419900a7p+0, 0x1.0p+0, 0x1.e608cfd9a47acp-1, 0x1.ca4b31f026aap-1, 0x1.b2036576afce6p-1,
    0x1.9c2d163a1aa2dp-1, 0x1.886e6037841edp-1, 0x1.767dcf5534862p-1,
  ]
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (float_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (float_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (float_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (float_literal)))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (array_expression
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (binary_expression
                        (simple_expression
                          (access_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))
                            (accessor
                              (dot_identifier
                                (dot)))))
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal)))))))
                  (expression
                    (simple_expression
                      (binary_expression
                        (simple_expression
                          (access_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))
                            (accessor
                              (dot_identifier
                                (dot)))))
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal)))))))
                  (expression
                    (simple_expression
                      (binary_expression
                        (simple_expression
                          (access_expression
                            (simple_expression
                              (atomic_expression
                                (literal
                                  (integer_literal))))
                            (accessor
                              (dot_identifier
                                (dot)))))
                        (simple_expression
                          (atomic_expression
                            (literal
                              (integer_literal)))))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal)))))
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (float_literal))))))))))))))
