================================================================================
escaping chars
================================================================================
fn init {
  println('\x78')
  println("\o377")
  println("\u{20BB7}")
  println("\u6211")
  println("\u6221å¥½\n")
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (char_literal
                            (escape_sequence)))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (escape_sequence))))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (escape_sequence))))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (escape_sequence))))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (literal
                          (string_literal
                            (string_fragment
                              (escape_sequence))
                            (string_fragment
                              (unescaped_string_fragment))
                            (string_fragment
                              (escape_sequence))))))))))))))))

================================================================================
byte literal
================================================================================
fn init {
  let b1 = b'a'
  println(b1.to_int())
  let b2 = b'\xff'
  println(b2.to_int())
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (byte_literal)))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (dot_apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))
                        (dot_identifier
                          (dot_operator))))))))))
        (statement_expression
          (let_expression
            (pattern
              (simple_pattern
                (lowercase_identifier)))
            (expression
              (simple_expression
                (atomic_expression
                  (literal
                    (byte_literal
                      (escape_sequence))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (dot_apply_expression
                        (simple_expression
                          (qualified_identifier
                            (lowercase_identifier)))
                        (dot_identifier
                          (dot_operator))))))))))))))

================================================================================
interpolation
================================================================================
fn main {
  println("hello, \{name}")
    abort("Index length does not match tensor shape \{asdf}")
}
--------------------------------------------------------------------------------

(structure
  (structure_item
    (function_definition
      (function_identifier
        (lowercase_identifier))
      (block_expression
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (string_interpolation
                          (string_fragment
                            (unescaped_string_fragment))
                          (interpolator
                            (expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier))))))))))))))
        (statement_expression
          (expression
            (simple_expression
              (apply_expression
                (simple_expression
                  (qualified_identifier
                    (lowercase_identifier)))
                (argument
                  (expression
                    (simple_expression
                      (atomic_expression
                        (string_interpolation
                          (string_fragment
                            (unescaped_string_fragment))
                          (interpolator
                            (expression
                              (simple_expression
                                (qualified_identifier
                                  (lowercase_identifier))))))))))))))))))
