================================================================================
loop expression
================================================================================
fn init {
  let x = loop x, 0 {
    a, b => continue c, d
    e, f => g
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (lowercase_identifier)
        (loop_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal)))
          (matrix_case_clause
            (lowercase_identifier)
            (lowercase_identifier)
            (continue_expression
              (qualified_identifier
                (lowercase_identifier))
              (qualified_identifier
                (lowercase_identifier))))
          (matrix_case_clause
            (lowercase_identifier)
            (lowercase_identifier)
            (qualified_identifier
              (lowercase_identifier))))))))

================================================================================
loop expression with multiple argument
================================================================================
fn init {
  let x = loop x, 0, 1 {
    a, b, c => continue c, d
    e, f => g
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (let_expression
        (lowercase_identifier)
        (loop_expression
          (qualified_identifier
            (lowercase_identifier))
          (atomic_expression
            (literal
              (integer_literal)))
          (atomic_expression
            (literal
              (integer_literal)))
          (matrix_case_clause
            (lowercase_identifier)
            (lowercase_identifier)
            (lowercase_identifier)
            (continue_expression
              (qualified_identifier
                (lowercase_identifier))
              (qualified_identifier
                (lowercase_identifier))))
          (matrix_case_clause
            (lowercase_identifier)
            (lowercase_identifier)
            (qualified_identifier
              (lowercase_identifier))))))))

================================================================================
loop expression with label
================================================================================
fn init {
  ll~: loop x, 0 {
    a, b => continue ll~ c, d
    e, f => break ll~ Some(g)
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (loop_expression
        (loop_label
          (label
            (lowercase_identifier)))
        (qualified_identifier
          (lowercase_identifier))
        (atomic_expression
          (literal
            (integer_literal)))
        (matrix_case_clause
          (lowercase_identifier)
          (lowercase_identifier)
          (continue_expression
            (label
              (lowercase_identifier))
            (qualified_identifier
              (lowercase_identifier))
            (qualified_identifier
              (lowercase_identifier))))
        (matrix_case_clause
          (lowercase_identifier)
          (lowercase_identifier)
          (break_expression
            (label
              (lowercase_identifier))
            (apply_expression
              (constructor_expression
                (uppercase_identifier))
              (arguments
                (argument
                  (qualified_identifier
                    (lowercase_identifier)))))))))))
