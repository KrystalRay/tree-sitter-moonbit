================================================================================
match patterns
================================================================================
fn main {
  match x {
    G | H => ()
    I as j => ()
    K(..) => ()
    L(label~, ..) => ()
    M(a, b) => ()
    N(a as c, b) => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (or_pattern
              (pattern
                (simple_pattern
                  (constructor_pattern
                    (constructor_expression
                      (uppercase_identifier)))))
              (pattern
                (simple_pattern
                  (constructor_pattern
                    (constructor_expression
                      (uppercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (as_pattern
              (pattern
                (simple_pattern
                  (constructor_pattern
                    (constructor_expression
                      (uppercase_identifier)))))
              (lowercase_identifier)))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (constructor_pattern
                (constructor_expression
                  (uppercase_identifier))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (constructor_pattern
                (constructor_expression
                  (uppercase_identifier))
                (constructor_pattern_argument
                  (label
                    (lowercase_identifier)))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (constructor_pattern
                (constructor_expression
                  (uppercase_identifier))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern
                      (lowercase_identifier))))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (constructor_pattern
                (constructor_expression
                  (uppercase_identifier))
                (constructor_pattern_argument
                  (pattern
                    (as_pattern
                      (pattern
                        (simple_pattern
                          (lowercase_identifier)))
                      (lowercase_identifier))))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (unit_expression))))))

================================================================================
literal pattern
================================================================================
fn main {
  match x {
    1 => ()
    1.0 => ()
    "hello" => ()
    '\r' => ()
    '\u0660' => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (simple_pattern
              (literal
                (integer_literal))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (literal
                (float_literal))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (literal
                (string_literal
                  (string_fragment
                    (unescaped_string_fragment))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (literal
                (char_literal
                  (escape_sequence)))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (literal
                (char_literal
                  (escape_sequence)))))
          (unit_expression))))))

================================================================================
range pattern
================================================================================
fn init {
  match x {
    0..=3 => println("x")
    0..<4 => println("y")
    _..<5 => println("z")
    _..<_ => println("z")
    (1 | 2)..<(3 | _) => println("z")
    1..=(4..<5) => println("z")
    (1..=4)..<5 => println("z")
   '\u0660'..='\u0669' => println("z")
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern
                (literal
                  (integer_literal)))
              (simple_pattern
                (literal
                  (integer_literal)))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern
                (literal
                  (integer_literal)))
              (simple_pattern
                (literal
                  (integer_literal)))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern)
              (simple_pattern
                (literal
                  (integer_literal)))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern)
              (simple_pattern)))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern
                (pattern
                  (or_pattern
                    (pattern
                      (simple_pattern
                        (literal
                          (integer_literal))))
                    (pattern
                      (simple_pattern
                        (literal
                          (integer_literal)))))))
              (simple_pattern
                (pattern
                  (or_pattern
                    (pattern
                      (simple_pattern
                        (literal
                          (integer_literal))))
                    (pattern
                      (simple_pattern)))))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern
                (literal
                  (integer_literal)))
              (simple_pattern
                (pattern
                  (range_pattern
                    (simple_pattern
                      (literal
                        (integer_literal)))
                    (simple_pattern
                      (literal
                        (integer_literal))))))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern
                (pattern
                  (range_pattern
                    (simple_pattern
                      (literal
                        (integer_literal)))
                    (simple_pattern
                      (literal
                        (integer_literal))))))
              (simple_pattern
                (literal
                  (integer_literal)))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (range_pattern
              (simple_pattern
                (literal
                  (char_literal
                    (escape_sequence))))
              (simple_pattern
                (literal
                  (char_literal
                    (escape_sequence))))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))))))

================================================================================
map pattern
================================================================================
fn main {
  match x {
    {} => println("o")
    { "a" : 1 } => println("a")
    { "a" : 1, .. } => println("b")
    { 1 : 2, "b" : 3 } => println("c")
    { "a" : 1, "b" : 2, "c" : 3 } => println("d")
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (simple_pattern
              (empty_struct_or_map_pattern)))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (simple_pattern
              (map_pattern
                (map_element_pattern
                  (map_element_key
                    (literal
                      (string_literal
                        (string_fragment
                          (unescaped_string_fragment)))))
                  (pattern
                    (simple_pattern
                      (literal
                        (integer_literal))))))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (simple_pattern
              (map_pattern
                (map_element_pattern
                  (map_element_key
                    (literal
                      (string_literal
                        (string_fragment
                          (unescaped_string_fragment)))))
                  (pattern
                    (simple_pattern
                      (literal
                        (integer_literal))))))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (simple_pattern
              (map_pattern
                (map_element_pattern
                  (map_element_key
                    (literal
                      (integer_literal)))
                  (pattern
                    (simple_pattern
                      (literal
                        (integer_literal)))))
                (map_element_pattern
                  (map_element_key
                    (literal
                      (string_literal
                        (string_fragment
                          (unescaped_string_fragment)))))
                  (pattern
                    (simple_pattern
                      (literal
                        (integer_literal))))))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (case_clause
          (pattern
            (simple_pattern
              (map_pattern
                (map_element_pattern
                  (map_element_key
                    (literal
                      (string_literal
                        (string_fragment
                          (unescaped_string_fragment)))))
                  (pattern
                    (simple_pattern
                      (literal
                        (integer_literal)))))
                (map_element_pattern
                  (map_element_key
                    (literal
                      (string_literal
                        (string_fragment
                          (unescaped_string_fragment)))))
                  (pattern
                    (simple_pattern
                      (literal
                        (integer_literal)))))
                (map_element_pattern
                  (map_element_key
                    (literal
                      (string_literal
                        (string_fragment
                          (unescaped_string_fragment)))))
                  (pattern
                    (simple_pattern
                      (literal
                        (integer_literal))))))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))))))

================================================================================
array patterns
================================================================================
fn main {
  match a {
    [] => ()
    [a, b] => ()
    [a, ..] => ()
    [a, .. as d] => ()
    [a, .. d] => ()
    [.., a] => ()
    [.. as d, a] => ()
    [.. d, a] => ()
    [a, .., b] => ()
    [a, .. as d, b] => ()
    [a, .. d, b] => ()
    [.. A, .. @a.T] => ()
    [.. "a", ..] => ()
    [.. b"a", ..] => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern)))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier))))
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier))))
                (array_sub_pattern
                  (pattern
                    (simple_pattern))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier))))
                (array_sub_pattern
                  (pattern
                    (as_pattern
                      (pattern
                        (simple_pattern))
                      (lowercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier))))
                (array_sub_pattern
                  (qualified_identifier
                    (lowercase_identifier))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (pattern
                    (simple_pattern)))
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (pattern
                    (as_pattern
                      (pattern
                        (simple_pattern))
                      (lowercase_identifier))))
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (qualified_identifier
                    (lowercase_identifier)))
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier))))
                (array_sub_pattern
                  (pattern
                    (simple_pattern)))
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier))))
                (array_sub_pattern
                  (pattern
                    (as_pattern
                      (pattern
                        (simple_pattern))
                      (lowercase_identifier))))
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier))))
                (array_sub_pattern
                  (qualified_identifier
                    (lowercase_identifier)))
                (array_sub_pattern
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (constructor_expression
                    (uppercase_identifier)))
                (array_sub_pattern
                  (constructor_expression
                    (package_identifier)
                    (dot_uppercase_identifier))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (string_literal
                    (string_fragment
                      (unescaped_string_fragment))))
                (array_sub_pattern
                  (pattern
                    (simple_pattern))))))
          (unit_expression))
        (case_clause
          (pattern
            (simple_pattern
              (array_pattern
                (array_sub_pattern
                  (bytes_literal
                    (string_fragment
                      (unescaped_string_fragment))))
                (array_sub_pattern
                  (pattern
                    (simple_pattern))))))
          (unit_expression))))))

================================================================================
pattern guard
================================================================================
fn main {
  match x {
    A(a) if a > 0 => ()
  }

  let f = fn {
    B(a) if a > 0 => ()
  }

  loop a, b {
    A(a), B(b) if a == b => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (match_expression
        (qualified_identifier
          (lowercase_identifier))
        (case_clause
          (pattern
            (simple_pattern
              (constructor_pattern
                (constructor_expression
                  (uppercase_identifier))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (pattern_guard
            (binary_expression
              (qualified_identifier
                (lowercase_identifier))
              (atomic_expression
                (literal
                  (integer_literal)))))
          (unit_expression)))
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (anonymous_matrix_lambda_expression
          (matrix_case_clause
            (pattern
              (simple_pattern
                (constructor_pattern
                  (constructor_expression
                    (uppercase_identifier))
                  (constructor_pattern_argument
                    (pattern
                      (simple_pattern
                        (lowercase_identifier)))))))
            (pattern_guard
              (binary_expression
                (qualified_identifier
                  (lowercase_identifier))
                (atomic_expression
                  (literal
                    (integer_literal)))))
            (unit_expression))))
      (loop_expression
        (qualified_identifier
          (lowercase_identifier))
        (qualified_identifier
          (lowercase_identifier))
        (matrix_case_clause
          (pattern
            (simple_pattern
              (constructor_pattern
                (constructor_expression
                  (uppercase_identifier))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (pattern
            (simple_pattern
              (constructor_pattern
                (constructor_expression
                  (uppercase_identifier))
                (constructor_pattern_argument
                  (pattern
                    (simple_pattern
                      (lowercase_identifier)))))))
          (pattern_guard
            (binary_expression
              (qualified_identifier
                (lowercase_identifier))
              (qualified_identifier
                (lowercase_identifier))))
          (unit_expression))))))
