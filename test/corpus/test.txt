================================================================================
basic
================================================================================
test "t" {
  let x = 1
}
--------------------------------------------------------------------------------

(structure
  (test_definition
    (string_literal
      (string_fragment
        (unescaped_string_fragment)))
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
anonymous
================================================================================
test {
  let x = 1
}
--------------------------------------------------------------------------------

(structure
  (test_definition
    (block_expression
      (let_expression
        (pattern
          (simple_pattern
            (lowercase_identifier)))
        (atomic_expression
          (literal
            (integer_literal)))))))

================================================================================
snapshot
================================================================================
test "a" (it : @test.T) {
  it.writeln("hello")
  it.snapshot!(filename="test.txt")
}
--------------------------------------------------------------------------------

(structure
  (test_definition
    (string_literal
      (string_fragment
        (unescaped_string_fragment)))
    (parameters
      (parameter
        (positional_parameter
          (lowercase_identifier)
          (type_annotation
            (qualified_type_identifier
              (package_identifier)
              (dot_identifier
                (dot_uppercase_identifier)))))))
    (block_expression
      (dot_apply_expression
        (qualified_identifier
          (lowercase_identifier))
        (dot_identifier
          (dot_lowercase_identifier))
        (argument
          (atomic_expression
            (literal
              (string_literal
                (string_fragment
                  (unescaped_string_fragment)))))))
      (apply_expression
        (access_expression
          (qualified_identifier
            (lowercase_identifier))
          (accessor
            (dot_identifier
              (dot_lowercase_identifier))))
        (apply_operator)
        (arguments
          (argument
            (labelled_argument
              (lowercase_identifier)
              (atomic_expression
                (literal
                  (string_literal
                    (string_fragment
                      (unescaped_string_fragment))))))))))))
