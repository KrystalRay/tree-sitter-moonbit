================================================================================
try
================================================================================
fn main {
  try {
    println("hello")
  } catch {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (try_expression
        (block_expression
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (try_catch_clause
          (case_clause
            (any_pattern)
            (unit_expression)))))))

================================================================================
try with catch all
================================================================================
fn main {
  try {
    println("hello")
  } catch! {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (try_expression
        (block_expression
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (try_catch_clause
          (case_clause
            (any_pattern)
            (unit_expression)))))))

================================================================================
try with else
================================================================================
fn main {
  try {
    println("hello")
  } catch {
    _ => ()
  } else {
    _ => 1 + 1
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (try_expression
        (block_expression
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (try_catch_clause
          (case_clause
            (any_pattern)
            (unit_expression)))
        (try_else_clause
          (case_clause
            (any_pattern)
            (binary_expression
              (atomic_expression
                (literal
                  (integer_literal)))
              (atomic_expression
                (literal
                  (integer_literal))))))))))

================================================================================
try with multiple catch clauses
================================================================================
fn main {
  try {
    println("hello")
  } catch {
    Error1(_) => ()
    Error2(_) => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (try_expression
        (block_expression
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (string_literal
                      (string_fragment
                        (unescaped_string_fragment)))))))))
        (try_catch_clause
          (case_clause
            (constructor_pattern
              (constructor_expression
                (uppercase_identifier))
              (constructor_pattern_argument
                (any_pattern)))
            (unit_expression))
          (case_clause
            (constructor_pattern
              (constructor_expression
                (uppercase_identifier))
              (constructor_pattern_argument
                (any_pattern)))
            (unit_expression)))))))

================================================================================
try question expression
================================================================================
fn main {
  try? f(true)
  try? f(true) |> ignore()
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (try_question_expression
        (apply_expression
          (qualified_identifier
            (lowercase_identifier))
          (arguments
            (argument
              (atomic_expression
                (literal
                  (boolean_literal)))))))
      (try_question_expression
        (binary_expression
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments
              (argument
                (atomic_expression
                  (literal
                    (boolean_literal))))))
          (apply_expression
            (qualified_identifier
              (lowercase_identifier))
            (arguments)))))))

================================================================================
try expression with no try
================================================================================
fn main {
  f(true) catch {
    _ => ()
  }
}
--------------------------------------------------------------------------------

(structure
  (function_definition
    (function_identifier
      (lowercase_identifier))
    (block_expression
      (try_expression
        (apply_expression
          (qualified_identifier
            (lowercase_identifier))
          (arguments
            (argument
              (atomic_expression
                (literal
                  (boolean_literal))))))
        (try_catch_clause
          (case_clause
            (any_pattern)
            (unit_expression)))))))
